---
title: Troubleshooting for BOSH Operators
owner: London Services Enablement
---

This topic for BOSH operators gives you information for troubleshooting on-demand services.

For more troubleshooting information, see
[Troubleshooting for <%= vars.ops_manager %> Operators](./troubleshooting.html).

## <a id="admin-instances"></a>Administer Service Instances

VMware recommends that you use the BOSH CLI for administering the deployments
created by the on-demand broker (<%= vars.product_abbr %>); for example for checking VMs, ssh, viewing logs.
For more information on installing the BOSH CLI, see
[Install](https://bosh.io/docs/cli-v2/#install).

VMware discourages using the BOSH CLI to update or delete <%= vars.product_abbr %> service deployments
as it causes `cf update-service` and `cf delete-service` operations to fail while
the BOSH operation is in progress.

In addition, any changes you make to the deployment are reverted by `cf update-service`
or by running the `upgrade-all-service-instances` errand.
All updates to the service instances must be done using the `upgrade-all-service-instances`
errand. For more information, see
[Upgrade All Service Instances](./upgrades.html#upgrade-all-instances).

## <a id="logs-and-metrics"></a>Logs and Metrics

### <a id="logs"></a>Logs

The <%= vars.product_abbr %> writes logs to a log file and to syslog.

The broker log contains error messages and non-zero exit codes returned by the
service adapter, as well as the `stdout` and `stderr` streams of the adapter.

The log file is located at `/var/vcap/sys/log/broker/broker.log`.
In syslog, logging is written with the tag `on-demand-service-broker`, under the
facility `user`, with priority `info`.

If you want to forward syslog to a syslog aggregator, see [Syslog Forwarding for Errand Logs](#errands-syslog) below.

The <%= vars.product_abbr %> generates a UUID for each request and prefixes all the logs for that request,
for example:

<pre class="terminal">
[on-demand-service-broker] [4d63080d-e038-45a3-85f9-93910f6b40b1] 2016/09/05 16:43:26.123456 a valid UAA token was found in cache, will not obtain a new one
</pre>

<p class="note">
  <span class="note__title">Note</span> The <%= vars.product_abbr %>'s HTTP server and start up logs
  are not prefixed with a request ID.
</p>

All <%= vars.product_abbr %> logs have a UTC timestamp.

### <a id="errands-syslog"></a> Syslog Forwarding for Errand Logs

If you want to forward your errand logs to a syslog aggregator, VMware recommends
colocating syslog release with the errand job.
For information, see the [syslog release](https://github.com/cloudfoundry/syslog-release)
repository in GitHub.

Example manifest:

```
- name: delete-all-service-instances-and-deregister-broker
  lifecycle: errand
  ...
  jobs:
  - name: delete-all-service-instances-and-deregister-broker
    release: on-demand-service-broker
    ...
  - name: syslog_forwarder
    release: syslog
    properties:
      syslog:
        address: ((syslog.address))
        port: ((syslog.port))
        transport: udp
        forward_files: false
        custom_rule: |
          module(load="imfile" mode="polling")
          input(type="imfile"
                File="/var/vcap/sys/log/delete-all-service-instances-and-deregister-broker/errand.stdout.log"
                Tag="delete-all-service-instances-and-deregister-broker")
          input(type="imfile"
                File="/var/vcap/sys/log/delete-all-service-instances-and-deregister-broker/errand.stderr.log"
                Tag="delete-all-service-instances-and-deregister-broker")
```

<p class="note">
  <span class="note__title">Note</span>
  The errand is configured to redirect <code>stdout</code> and <code>stderr</code> to
  <code>/var/vcap/sys/log/ERRAND_NAME/errand.stdout.log</code> and
  <code>/var/vcap/sys/log/ERRAND_NAME/errand.stderr.log</code>.
  When configuring your errand, be careful to match the actual log file paths in
  the <code>custom_rule</code> section.
</p>


### <a id="metrics"></a>Metrics

If you have configured broker metrics, the broker emits
metrics to the Loggregator Firehose.
For how to do the configuration, see [Configure Service Metrics](./operating.html#broker-metrics).

You can consume these metrics by using the CF CLI Firehose plugin.
See the [firehose-plugin](https://github.com/cloudfoundry/firehose-plugin) repository in GitHub.

<p class="note">
  <span class="note__title">Note</span> The broker must be registered with a Cloud Foundry in order for metrics to be
  successfully emitted.
  For how to register the broker, see <a href="./management.html#register-broker">Register Broker</a>.
</p>

#### <a id="service-metrics"></a> Service-level Metrics
The broker emits a metric indicating the total number of instances across all plans.
In addition, if there is a global quota set for the service, a metric showing how much
of that quota is remaining is emitted. Service-level metrics use the format shown below.

```
origin:"BROKER-DEPLOYMENT-NAME" eventType:ValueMetric timestamp:TIMESTAMP deployment:"BROKER-DEPLOYMENT-NAME" job:"broker" index:"BOSH-JOB-INDEX" ip:"IP" valueMetric:<name:"/on-demand-broker/SERVICE-OFFERING-NAME/total_instances" value:INSTANCE-COUNT unit:"count" >
origin:"BROKER-DEPLOYMENT-NAME" eventType:ValueMetric timestamp:TIMESTAMP deployment:"BROKER-DEPLOYMENT-NAME" job:"broker" index:"BOSH-JOB-INDEX>" ip:"IP" valueMetric:<name:"/on-demand-broker/SERVICE-OFFERING-NAME/quota_remaining" value:QUOTA-REMAINING unit:"count" >
```

#### <a id="plan-metrics"></a> Plan-level Metrics
For each service plan, the metrics report the total number of instances for that plan.
If there is a quota set for the plan, the metrics also report how much of that quota is remaining.
Plan-level metrics are emitted in the following format.

```
origin:"BROKER-DEPLOYMENT-NAME" eventType:ValueMetric timestamp:TIMESTAMP deployment:"BROKER-DEPLOYMENT-NAME" job:"broker" index:"BOSH-JOB-INDEX" ip:"IP" valueMetric:<name:"/on-demand-broker/SERVICE-OFFERING-NAME/PLAN-NAME/total_instances" value:INSTANCE-COUNT unit:"count" >
origin:"BROKER-DEPLOYMENT-NAME" eventType:ValueMetric timestamp:TIMESTAMP deployment:"BROKER-DEPLOYMENT-NAME" job:"broker" index:"BOSH-JOB-INDEX" ip:"IP" valueMetric:<name:"/on-demand-broker/SERVICE-OFFERING-NAME/PLAN-NAME/quota_remaining" value:QUOTA-REMAINING unit:"count" >
```

If `quota_remaining` is `0` then you need to increase your plan quota in the BOSH manifest.


## <a id="secure-binding-troubleshooting"></a> Secure Binding Credentials

If you have configured secure binding credentials, the broker stores credentials
on runtime CredHub.
For more information, see [Enable Secure Binding](./operating.html#secure-binding).

You can see and consume these credentials using the CredHub CLI.
For more information, see the [credHub-cli](https://github.com/cloudfoundry-incubator/credhub-cli)
repository in GitHub.

<p class="note">
  <span class="note__title">Note</span>
  Usually, CredHub is not accessible from outside the Cloud Foundry network.
  Use the CredHub CLI from within the internal network, or connect using an appropriate tunnel.
</p>

In failure scenarios, such as when CredHub is down or when the CredHub client
credentials are wrong, the broker logs to the file at `/var/vcap/sys/log/broker/broker.log`
where the root cause is generally given.
For more information, see [Logs](#logs) above.

### <a id="error-causes"></a> Common Causes of Errors

The following are some reasons that you might get an error:

* CredHub is down / wrong CredHub URL / cannot access URL
* Wrong credentials to access CredHub
* Problem with CA certs for CredHub or UAA
* Binding credentials in an exotic format (the broker only accepts string and
string map credentials)


## <a id="identifying-deployments"></a>Identify Deployments in BOSH

There is a one-to-one mapping between the service instance ID from Cloud Foundry and the
deployment name in BOSH. The convention is that the BOSH deployment name is the
service instance ID prefixed by `service-instance_`.
To identify the BOSH deployment for a service instance you can do the following:

1. Determine the GUID of the service.
  Run the following command:

    ```
    cf service --guid SERVICE-NAME
    ```
    Where `SERVICE-NAME` is the name of your service.
    <br><br>
    For example:
    <pre class="terminal">
    $ cf service --guid my-service
    </pre>
    Record the GUID in the output of the command.

1. Identify your deployment.
  Run `bosh deployments` and look for `service-instance_GUID`.

1. (Optional) Get current tasks for your deployment.
  Run the following command:

    ```
    bosh tasks -d service-instance_GUID
    ```
    Where `GUID` is the GUID for your service instance, which you retrieved above.
    <br><br>
    For example:
    <pre class="terminal">
    $ bosh tasks -d \
    service-instance_30d4a67f-d220-4d06-9989-58a976b86b35
    </pre>

## <a id="id-tasks"></a>Identify Tasks in BOSH

Most operations on the on demand service broker API are implemented by launching BOSH tasks.
If an operation fails, it may be useful to investigate the corresponding BOSH task.
For more information about BOSH tasks, see [Tasks](https://bosh.io/docs/cli-v2/#task-mgmt)
in the BOSH documentation.

To identify tasks in BOSH, do the following:

1. Determine the ID of the service for which an operation failed.
  Run the following command:

    ```
    cf service --guid SERVICE-NAME
    ```
    Where `SERVICE-NAME` is the name of your service.
    <br><br>
    For example:
    <pre class="terminal">
    $ cf service --guid my-service
    </pre>
    Record the GUID in the output of the command.

1. SSH on to the service broker VM.
  Run the following command:

    ```
    bosh -d BROKER-DEPLOYMENT-NAME ssh
    ```
    Where `BROKER-DEPLOYMENT-NAME` is the name of your broker deployment.
    <br><br>
    For example:
    <pre class="terminal">
    $ bosh -d my-broker ssh
    </pre>

1. In the broker log, look for lines relating to the service, identified by the service ID.
Lines recording the starting and finishing of BOSH tasks also have the BOSH task ID:

    ```
    on-demand-service-broker: [on-demand-service-broker] [4d63080d-e038-45a3-85f9-93910f6b40b1] 2016/04/13 09:01:50.793965 Bosh task id for Create instance 30d4a67f-d220-4d06-9989-58a976b86b35 was 11470
    on-demand-service-broker: [on-demand-service-broker] [4d63080d-e038-45a3-85f9-93910f6b40b1] 2016/04/13 09:06:55.793976 task 11470 success creating deployment for instance 30d4a67f-d220-4d06-9989-58a976b86b35: create deployment

    on-demand-service-broker: [on-demand-service-broker] [8bf5c9f6-7acd-4ab4-9214-363a6f6bef79] 2016/04/13 09:16:20.795035 Bosh task id for Update instance 30d4a67f-d220-4d06-9989-58a976b86b35 was 11473
    on-demand-service-broker: [on-demand-service-broker] [8bf5c9f6-7acd-4ab4-9214-363a6f6bef79] 2016/04/13 09:17:20.795181 task 11473 success updating deployment for instance 30d4a67f-d220-4d06-9989-58a976b86b35: create deployment

    on-demand-service-broker: [on-demand-service-broker] [af6fab15-c95e-438b-aa6b-bc4329d4154f] 2016/04/13 09:17:52.803824 Bosh task id for Delete instance 30d4a67f-d220-4d06-9989-58a976b86b35 was 11474
    on-demand-service-broker: [on-demand-service-broker] [af6fab15-c95e-438b-aa6b-bc4329d4154f] 2016/04/13 09:19:56.803938 task 11474 success deleting deployment for instance 30d4a67f-d220-4d06-9989-58a976b86b35: delete deployment service-instance_30d4a67f-d220-4d06-9989-58a976b86b35
    ```

1. Use the task ID to obtain the task log from BOSH, adding flags such as `--debug`
or `--cpi` as necessary.
  For example:
   <pre class="terminal">
    $ bosh task 11470
   </pre>

## <a id="id-uaa-issues"></a>Identify Issues When Connecting to BOSH or UAA

The <%= vars.product_abbr %> interacts with the BOSH Director to provision and deprovision instances,
and is authenticated through the Director's UAA.
For an example configuration, see
[kafka-example-service-adapter-release](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter-release/blob/778fa99ee08af2193fd8381279d73fcfb94cf662/docs/example-manifest.yml#L37-L47)
in GitHub.

If BOSH or UAA are configured incorrectly in the broker's manifest, then
error messages are displayed in the broker's log.
These messages indicate whether the issue is caused by an unreachable destination
or bad credentials.

For example:

<pre class="terminal">
on-demand-service-broker: [on-demand-service-broker]
[575afbc1-b541-481d-9cde-b3d3e67e87bf] 2016/05/18 15:56:40.100579
Error authenticating (401): {"error":"unauthorized","error_description":
"Bad credentials"}, ensure that properties.BROKER-JOB.bosh.authentication.uaa is
correct and try again.
</pre>

## <a id="listing-instances"></a>List Service Instances

<%= vars.product_abbr %> persists the list of <%= vars.product_abbr %>-deployed service instances and provides an endpoint
to retrieve them.
This endpoint requires basic authentication.

During disaster recovery, you can use this endpoint to assess the situation.

**Request:**

`GET http://USERNAME:PASSWORD@ON-DEMAND-BROKER-IP:8080/mgmt/service_instances`

**Response:**

`200 OK`

Example JSON body:

  ```json
  [
    {
      "instance_id": "4d19462c-33cf-11e6-91cc-685b3585cc4e",
      "plan_id": "60476620-33cf-11e6-a841-685b3585cc4e",
      "bosh_deployment_name": "service-instance_4d19462c-33cf-11e6-91cc-685b3585cc4e"
    },
    {
      "instance_id": "57014734-33cf-11e6-ba8d-685b3585cc4e",
      "plan_id": "60476620-33cf-11e6-a841-685b3585cc4e",
      "bosh_deployment_name": "service-instance_57014734-33cf-11e6-ba8d-685b3585cc4e"
    }
  ]
  ```

## <a id="listing-orphans"></a>List Orphan Deployments

<%= vars.product_abbr %> provides an endpoint that compares the list of service instance
deployments against the service instances registered in Cloud Foundry. When called,
the endpoint returns a list of orphaned deployments, if any are present.

This endpoint is exercised in the `orphan-deployments` errand.
For information about this errand, see [Orphan Deployments](./management.html#orphan-deployments).
To call this endpoint without running the errand, use `curl`.

**Request:**

`GET http://USERNAME:PASSWORD@ON-DEMAND-BROKER-IP:8080/mgmt/orphan_deployments`

**Response:**

`200 OK`

Example JSON body:

```json
[
  {
	  "deployment_name": "service-instance_d482abd3-8051-48d2-8067-9ccdf02327f3"
  }
]
```

## <a id="kb"></a>Knowledge Base (Community)

<%# The below partial is in https://github.com/pivotal-cf/docs-partials %>

<%= partial vars.path_to_partials + '/services-tshoot/tshoot-kb' %>

## <a id="support"></a>File a Support Ticket

<%# The below partial is in https://github.com/pivotal-cf/docs-partials %>

<%= partial vars.path_to_partials + '/services-tshoot/tshoot-support' %>
