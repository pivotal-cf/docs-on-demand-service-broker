---
title: Upgrading the On-Demand Broker
owner: London Services Enablement
---

This topic for <%= vars.ops_manager %> operators and BOSH operators gives you information about
upgrading the on-demand broker provided by <%= vars.product_full %>, upgrading service offerings, 
and upgrading service instances.

<%= partial vars.path_to_partials + "/upgrade-planner" %>

## <a id="upgrade-broker"></a>Upgrade the Broker

To upgrade the broker, do the following:

1. Download a new version of the on-demand service broker BOSH release from
[<%= vars.product_network %>](https://bosh.io/releases/github.com/pivotal-cf/on-demand-service-broker-release).

1. Upload the release to the BOSH Director by running:

    ```
    bosh -e BOSH-DIRECTOR-NAME upload-release RELEASE-FILE-NAME.tgz
    ```

1. Make any necessary changes to the core broker configuration in the broker manifest.
For more information about the core broker configuration, see
[Configure Your Broker](./operating.html#core-broker-config).

1. Deploy the broker by running:

    ```
    bosh -e BOSH-DIRECTOR-NAME -d DEPLOYMENT-NAME deploy DEPLOYMENT-MANIFEST.yml
    ```

## <a id="upgrade-service-offering"></a>Upgrade the Service Offering

The service offering is made of the following:

* Service catalog
* Service adapter BOSH release
* Service BOSH releases
* Service stemcells

<br>
To upgrade a service offering, do the following:

1. Make any changes to the service catalog in the broker manifest.
For more information about the service catalog, see the
[Starter Snippet](./operating.html#starter-snippet).

1. Upload any new service BOSH releases to the BOSH Director by running:

    ```
    bosh -e BOSH-DIRECTOR-NAME upload-release RELEASE-FILE-NAME.tgz
    ```

1. Make any changes to service releases in the broker manifest.

1. Upload any new service stemcells to the BOSH Director.

    ```
    bosh -e BOSH-DIRECTOR-NAME upload-stemcell STEMCELL-LOCATION
    ```
    Where `STEMCELL-LOCATION` is the path or URL of the stemcell.

1. Make any changes to the service stemcells in the `service_deployment` broker manifest.

1. Deploy the broker by running:

    ```
    bosh -e BOSH-DIRECTOR-NAME -d DEPLOYMENT-NAME deploy DEPLOYMENT-MANIFEST.yml
    ```

New service instances are created using the latest service offering.
To upgrade all existing instances, you can run the upgrade-all-service-instances errand.
See [Upgrade All Service Instances](#upgrade-all-instances) below.

<p class="note warning">
  <strong>Warning:</strong> Until a service instance has been upgraded, <code>cf update-service</code> operations are blocked and an error is shown. For more information, see <a href="./troubleshooting.html#upgrade-individual-instances">Cannot Update a Service Instance</a>.
</p>

## <a id="upgrade-all-instances"></a>Upgrade All Service Instances

To upgrade all existing service instances after the service offering has been updated or upgraded, do the following:

1. Add the following instance group to your broker manifest:

    ```yaml
    - name: upgrade-all-service-instances
      lifecycle: errand
      instances: 1
      jobs:
        - name: upgrade-all-service-instances
          release: ODB-RELEASE-NAME
          properties:
            canaries: NUMBER-OF-CANARIES # defaults to 0
            canary_selection_params:
              cf_org: ORG # specifying service instances to upgrade as canaries
              cf_space: SPACE # specifying service instances to upgrade as canaries
            max_in_flight: NUMBER-OF-PARALLEL-UPGRADES # defaults to 1
            polling_interval_seconds: POLLING-INTERVAL-IN-SECONDS # defaults to 60
            attempt_interval_seconds: ATTEMPT-INTERVAL-IN-SECONDS # defaults to 60
            attempt_limit: NUMBER-OF-ATTEMPTS # defaults to 5
            broker_uri: BROKER-URI # optional
            tls: # optional
              ca_cert: BROKER-CA-CERT
              disable_ssl_cert_verification: TRUE|FALSE # defaults to false
      vm_type: VM-TYPE
      stemcell: STEMCELL
      networks: [{name: NETWORK}]
      azs: [AZ]
    ```

    The errand properties allow fine-tuning of the behavior of the upgrade job:
    <table class="nice">
      <col width="25%">
      <col width="75%">
        <th>Property</th>
        <th>Description</th>
        <tr>
            <td><code>max_in_flight</code></td>
            <td>Sets the limit for the number of upgrades
          occurring concurrently.  The number of simultaneous upgrades is limited by
          the number of available BOSH workers. See <a
          href="https://bosh.io/jobs/director?source=github.com/cloudfoundry/bosh#p=director.workers">workers</a>
          in the Cloud Foundry BOSH documentation.
          Set the <code>max_in_flight</code> value to lower than this
          limit to avoid over-saturating BOSH.</td>
        </tr>
        <tr>
            <td><code>canaries</code></td>
            <td>Sets the number of canary instances to upgrade first.
            If all canary instances upgrade, the remaining instances are upgraded.
            If a canary instance fails to upgrade or the <code>attempt_limit</code>
            is reached, the upgrade fails.
            No further instances are upgraded, and the errand exits with an error;
            however, all in-flight upgrades can complete.
            Canary instances are upgraded in parallel, respecting the <code>max_in_flight</code> value.
            <br><br><strong>Note:</strong> Canary instances are selected in
            a non-deterministic way using all available instances.
            If a selected instance is busy or was deleted, another instance is selected.
            If all instances are busy, the errand retries, respecting the
            <code>attempt_limit</code> and <code>attempt_interval_seconds</code>.
          </td>
        </tr>
        <tr>
            <td><strong>(Optional)</strong><br><code>canary_selection_params</code></td>
            <td>Use this to specify an org and a space that you want canaries to be sourced from during an upgrade.
              If an org is specified, then a space must also be provided and vice versa.
              If <code>canaries</code> is specified,
              the broker upgrades that number of instances present in the org and space.
              If fewer instances are present than specified,
              the broker upgrades as many instances as possible in that org and space.
              <br><br><strong>Note:</strong> If <code>canary_selection_params</code>
              are specified and no instances exist in that org or space, no canaries are chosen.
              If other instances exist, the broker fails, alerting you to chose different selection criteria.
              If <code>canary_selection_params</code> is specified but empty, it is treated as if none was provided.
            </td>
        </tr>
        <tr>
            <td><code>polling_interval_seconds</code></td>
            <td>This controls the wait between checking the status of the successfully submitted BOSH upgrade job.
            If service instances have in-progress BOSH operations,
            upgrade requests are rejected and the errand queues those instances for a retry:
              <ul><br>
                <li><code>attempt_interval_seconds</code> determines the time to wait between retrying upgrades.</li>
                <li><code>attempt_limit</code> sets the number of times these instances are retried for upgrade.</li>
              </ul>
            </td>
        </tr>
    </table>

1. Deploy the broker manifest by running:

    ```
    bosh -e BOSH-DIRECTOR-NAME -d DEPLOYMENT-NAME deploy DEPLOYMENT-MANIFEST.yml
    ```

1. Run the errand with the following command:

    ```
    bosh -d DEPLOYMENT-NAME run-errand upgrade-all-service-instances
    ```

<p class="note"><span class="note__title">Note</span> The <code>upgrade-all-service-instances</code> errand triggers service instance lifecycle errands configured for the broker. For more information, see <a href="./operating.html#lifecycle-errands">Service Instance Lifecycle Errands</a>.
</p>

<%= partial vars.path_to_partials + "/odb/ip-bosh-dns" %>

### <a id="service-instances-api"></a> Service Instances API

The service instances API is used with an on-demand service broker without a connection
to Cloud Foundry.
It consists of an HTTP endpoint that the `orphan-deployments` and `upgrade-all-service-instances`
errands can use to retrieve the list of instances known to the platform.

You can configure the API endpoint in the broker job.

<p class="warning note"><strong>Warning:</strong> The Service Instances API is an advanced feature. Configuring a Service Instances API is not required, unless you are operating in very specific circumstances, such as running an on-demand service broker with no connection to Cloud Foundry. <br><br> You are required to provide an endpoint which satisfies the API requirements detailed below and also guarantees that all service instances which need to be upgraded are part of that response. If you configure an endpoint which does not satisfy these criteria, some service instances may become unusable.
</p>

<p class="note"><span class="note__title">Note</span> The Service Instances API definition is at v0.1.0 and should be considered subject to change.</p>

#### <a id="general-requests"></a> General Request and Response

The API endpoint must handle the request below with the appropriate response.

Example Request:

<pre class="terminal">
curl -u BASIC-AUTH-USERNAME:BASIC-AUTH-PASSWORD \
-X GET \
http://SERVICE-INSTANCES-API-URL
</pre>

Example Response:

<pre class="terminal">
HTTP/1.1 200 OK
Content-Type: application/json

[
  {"service_instance_id": GUID-1, "plan_id": "dedicated"},
  {"service_instance_id": GUID-2, "plan_id": "dedicated"},
  {"service_instance_id": GUID-3, "plan_id": "dedicated"},
  [...]
]
</pre>

The Services Instances API returns other status codes such as `3xx`, `4xx`, or
`5xx` for non-successful scenarios.

The plan IDs listed in the response must correspond to the plan IDs in each plan's
definition in the <%= vars.product_abbr %> deployment manifest, not any other ID that may be assigned
by the service controller.

#### <a id="filtered-requests"></a> Filtered Request and Response

The API endpoint must be able to provide a filtered response based on query parameters
passed in the request.

The `canary_selection_params` property defines how to filter the canary instances
from of a set of instances.
If the on-demand service broker is configured to use `canary_selection_params`,
The Service Instances API must respond with a filtered list of service instances
when the `canary_selection_params` are passed as query parameters.

For example, if the `canary_selection_params` are configured as following:

```
canary_selection_params:
  cf_org: staging-org
  cf_space: staging-space
```

Then, the Service Instances API returns a filtered list of instances when `cf_org` and
`cf_space` are passed as query parameters in the request.

Example Request:

<pre class="terminal">
curl -u BASIC-AUTH-USERNAME:BASIC-AUTH-PASSWORD \
-X GET \
http://SERVICE-INSTANCES-API-URL?cf_org=staging-org&cf_space=staging-space
</pre>

Example Response:

<pre class="terminal">
HTTP/1.1 200 OK
Content-Type: application/json

[
  {"service_instance_id": GUID-1, "plan_id": "dedicated"}
]
</pre>

The instances in the filtered list are used as canary instances and upgraded before the rest.
The number of canaries taken from this list can be configured
by specifying the `canaries` property in the on-demand service broker manifest.

#### <a id="configure-broker-siapi"></a> Configure the Broker to Use the Service Instances API

To configure the broker to use a Service Instance API provider for errands,
update the broker's configuration in its deployment manifest to include the
`service_instances_api` section:

```yaml
- name: upgrade-all-service-instances
  ...
  jobs:
    - name: broker
      ...
      properties:
        ...
        # Add the following section:
        service_instances_api:
          # required:
          url: SERVICE-INSTANCES-API-URL
          # optional:
          root_ca_cert: ROOT-CA-CERT
          # optional - defaults to false:
          disable_ssl_cert_verification: TRUE|FALSE
          authentication:
            # required - currently the only supported authentication type:
            basic:
              username: USERNAME
              password: PASSWORD
 ...
```

Where `SERVICE-INSTANCES-API-URL` is the URL of the Service Instances API provider.
