---
title: Getting Started&#58; ODB on a Local Development Environment
owner: London Services Enablement
---

This topic describes how to create and manage an on-demand service broker (<%= vars.product_abbr %>)
 on a local development machine using <%= vars.platform_name %> Dev and BOSH Lite.

For more information about the components in this topic, see [<%= vars.platform_name %> Dev and
BOSH-Lite](https://docs.pivotal.io/tiledev/environments.html#pcfdev).

<div class="note">
  <p style="margin-top: 0"><strong>Note: </strong> The examples in this topic are based on
Kafka open source messaging. See the following sample code directories:</p>
 <ul>
    <li><a href="https://github.com/pivotal-cf-experimental/kafka-example-service-release">Kafka example service</a></li>
    <li><a href="https://github.com/pivotal-cf-experimental/kafka-example-service-adapter">Kafka example service adapter</a></li>
    <li><a href="https://github.com/pivotal-cf-experimental/kafka-example-app">Kafka example app</a></li>
  </ul>
</div>
## <a id="prereq"></a>Prerequisites

Before you set up and use <%= vars.product_abbr %> on your local machine,
install and configure the following components:

- **BOSH Lite <%= vars.odb_bosh_lite_version %> or later.**
  To install BOSH Lite, see [Install](http://bosh.io/docs/bosh-lite/#install)
in the BOSH Lite documentation.

- **<%= vars.platform_name %> Dev file <%= vars.odb_pcfdev_version %>.**
  To install <%= vars.platform_name %> Dev, see [Installing <%= vars.platform_name %> Dev](https://docs.pivotal.io/pcf-dev/#installing).
  Record the <%= vars.platform_name %> Dev domain for later.
  The default is `local.pcfdev.io`.

## <a id="setup"></a>Part 1: Set Up

This section details how to prepare BOSH Lite and set up the Kafka example service,
the Kakfa example service adapter, and <%= vars.product_abbr %>.

### <a id="set_up_bosh"></a>Step 1: Prepare BOSH Lite

To prepare BOSH Lite, do the following:

1. Target your BOSH Lite installation.
   <pre>
    bosh alias-env lite -e 192.168.50.4
   </pre>

1. Upload the BOSH Lite stemcell.
   <pre>
    bosh -e lite upload-stemcell \
    https<span>:</span>//bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent?v=<%= vars.odb_warden_stemcell_version %>
   </pre>

### <a id="set_up_kafka_sr"></a> Step 2: Set Up the Kafka Example Service

To set up the Kafka example service, do the following:

1. Clone the Kafka example service into your workspace.
   <pre>
    git clone \
    https<span>:</span>//github.com/pivotal-cf-experimental/kafka-example-service-release.git
   </pre>

1. In the `kafka-example-service-release` directory, create and upload the
   Kafka example service.
   <pre>
    cd kafka-example-service-release
    bosh create-release --name kafka-example-service
   </pre>

1. Upload the service to the BOSH director.
  <pre>
    bosh -e lite upload-release
  </pre>

### <a id="set_up_kafka_sa"></a> Step 3: Set Up the Kafka Example Service Adapter

To set up the Kafka example service adapter, do the following:

1. Clone the Kafka example service adapter.
   <pre>
    git clone \
    https<span>:</span>//github.com/pivotal-cf-experimental/kafka-example-service-adapter-release.git
   </pre>

1. Update service adapter dependencies.
  <pre>
    cd kafka-example-service-adapter-release
    git submodule update --init --recursive
  </pre>

1. Create the example service adapter.
  <pre>
    bosh create-release --name kafka-example-service-adapter
  </pre>

1. Upload the example service adapter to the BOSH director.
  <pre>
    bosh -e lite upload-release
  </pre>

### <a id="set_up_odb"></a> Step 4: Set Up <%= vars.product_abbr %>

To set up <%= vars.product_abbr %>, do the following:

1. Download the on-demand service broker from <%= vars.product_network %>. To download,
see [<%= vars.product_full %>](https://bosh.io/releases/github.com/pivotal-cf/on-demand-service-broker-release).

1. Upload the `on-demand-service-broker` release.
  <pre>
  bosh -e lite upload-release on-demand-service-broker-X.Y.Z.tgz
  </pre>
  Where:
  - `X.Y.Z` is the <%= vars.product_abbr %> release version.<br><br>
  For example:
  <pre class="terminal">
  $ bosh -e lite upload-release on-demand-service-broker-0.21.1.tgz
  </pre>

## <a id="create"></a>Part 2: Create

This section describes how to create a BOSH deployment and a service broker
on <%= vars.platform_name %> Dev.

### <a id="create_bosh"></a> Step 1: Create a BOSH Deployment

To create a BOSH Lite deployment, do the following:

1. Create a new directory in your workspace and a `cloud_config.yml`
for the BOSH Lite Director. For example:

    ```yaml
    vm_types:
    - name: container
      cloud_properties: {}

    networks:
    - name: kafka
      type: manual
      subnets:
      - range: 10.244.1.0/24
        gateway: 10.244.1.1
        az: lite
        cloud_properties: {}

    disk_types:
    - name: ten
      disk_size: 10_000
      cloud_properties: {}

    azs:
    - name: lite
      cloud_properties: {}

    compilation:
      workers: 2
      reuse_compilation_vms: true
      network: kafka
      az: lite
      cloud_properties: {}
    ```

1. Update the BOSH Lite cloud config using the deployment manifest.
  <pre>
    bosh -e lite update-cloud-config cloud\_config.yml
  </pre>

1. Record the URL and UUID of your BOSH Lite director.
  <pre>
    bosh environment
  </pre>
  See the following example output:
  <pre class="terminal">
    $ bosh environment
    Config
                 /Users/pivotal/.bosh_config

    Director
      Name       Bosh Lite Director
      URL        https<span>:</span>//192.168.50.4:25555
      Version    1.3215.0 (00000000)
      User       admin
      UUID       17a45148-1d00-43bc-af28-9882e5a6535a
      CPI        warden\_cpi
      dns        disabled
      compiled\_package\_cache enabled (provider: local)
      snapshots  disabled
  </pre>

1. Create a BOSH Lite deployment manifest in a file called
`deployment_manifest.yml` using the following as a base:

    ```yaml
    name: kafka-on-demand-broker

    director_uuid: BOSH-LITE-UUID

    releases:
    - name: &broker-release on-demand-service-broker
      version: latest
    - name: &service-adapter-release kafka-example-service-adapter
      version: latest
    - name: &service-release kafka-example-service
      version: latest

    stemcells:
    - alias: trusty
      os: ubuntu-trusty
      version: STEMCELL-VERSION

    instance_groups:
    - name: broker
      instances: 1
      vm_type: container
      persistent_disk_type: ten
      stemcell: trusty
      azs: [lite]
      networks:
      - name: kafka
      jobs:
      - name: kafka-service-adapter
        release: *service-adapter-release
      - name: admin_tools
        release: *service-release
      - name: broker
        release: *broker-release
        properties:
          port: 8080
          username: broker    # or replace with your own
          password: password  # or replace with your own
          disable_ssl_cert_verification: true
          bosh:
            url: BOSH-LITE-URL
            authentication:
              basic:
                username: admin
                password: admin
          cf:
            url: https://api.PCF-DEV-DOMAIN
            authentication:
              url: https://uaa.PCF-DEV-DOMAIN
              user_credentials:
                username: admin
                password: admin
          service_adapter:
            path: /var/vcap/packages/odb-service-adapter/bin/service-adapter
          service_deployment:
            releases:
            - name: *service-release
              version: SERVICE-RELEASE-VERSION
              jobs: [kafka_server, zookeeper_server]
            stemcells:
              - os: ubuntu-trusty
                version: STEMCELL-VERSION
          service_catalog:
            id: D94A086D-203D-4966-A6F1-60A9E2300F72
            service_name: kafka-service-with-odb
            service_description: Kafka Service
            bindable: true
            plan_updatable: true
            tags: [kafka]
            plans:
            - name: small
              plan_id: 11789210-D743-4C65-9D38-C80B29F4D9C8
              description: A Kafka deployment with a single instance of each job and persistent disk
              instance_groups:
              - name: kafka_server
                vm_type: container
                instances: 1
                persistent_disk_type: ten
                azs: [lite]
                networks: [kafka]
              - name: zookeeper_server
                vm_type: container
                instances: 1
                persistent_disk_type: ten
                azs: [lite]
                networks: [kafka]
              properties:
                auto_create_topics: true
                default_replication_factor: 1

    update:
      canaries: 1
      canary_watch_time: 30000-180000
      update_watch_time: 30000-180000
      max_in_flight: 4
    ```
    Where:
    - `BOSH-LITE-UUID` is the `UUID` value you recorded in the BOSH environment
       step above.
    - `BOSH-LITE-URL` is the `URL` value you recorded in the BOSH environment
       step above.
    - `PCF-DEV-DOMAIN` is the <%= vars.platform_name %> Dev domain you recorded in the
      [Prerequisites](#prerequisites) above.


1. Deploy the broker.
    <pre>
    bosh -e lite -d kafka-on-demand-broker deployment\_manifest.yml
    </pre>

1. Record the IP address of the deployed broker.
    <pre>
    bosh -e lite -d kafka-on-demand-broker instances
    </pre>

    See the following example output:

    <pre class="terminal">
    $ Using environment 'lite' as user 'admin' (openid, bosh.admin)

    Task 54727. Done

    Deployment 'redis-on-demand-broker-dev2'

    Instance                                     Process State  AZ  IPs
    broker/84294753-84b9-4be1-a338-37c1f3e71919  running        z1  10.244.1.2

    1 instances

    Succeeded
    </pre>

### <a id="create_service"></a> Step 2: Create a Service Broker on <%= vars.platform_name %> Dev

To create a service broker on <%= vars.platform_name %> Dev, do the following:

1. Create a service broker on <%= vars.platform_name %> Dev and enable access to its service offering.
    <pre>
    cf create-service-broker kafka-broker USERNAME PASSWORD http<span>:</span>//BROKER-IP:8080
    </pre>
    Where:<br>
    - `USERNAME` and `PASSWORD` are the broker's credentials set under `properties` in the broker job.
    - `BROKER-IP` is the value obtained in the step above. See the last step in
     [Create a BOSH Deployment](#create_bosh).

    For example:
    <pre class="terminal">
    $ cf create-service-broker kafka-broker broker password http<span>:</span>//10.244.1.2:8080
    </pre>

1. Enable access to the broker's service plans.
    <pre>
    cf enable-service-access kafka-service-with-odb
    </pre>

1. View the broker-offered services in the Marketplace.
    <pre>
    cf marketplace
    </pre>

    See the following example output:

    <pre class="terminal">
    Getting services from Marketplace in org pcfdev-org / space pcfdev-space as admin...
    OK

    service                  plans        description
    kafka-service-with-odb   small        Kafka Service
    p-mysql                  512mb, 1gb   MySQL databases on demand
    p-rabbitmq               standard     RabbitMQ is a robust and scalable high-performance multi-protocol messaging broker.
    p-redis                  shared-vm    Redis service to provide a key-value store
    </pre>

1. Create a service instance using the Kafka on-demand broker.

    <pre>
    cf create-service kafka-service-with-odb small k1
    </pre>

## <a id="verify-use"></a> Part 3: Verify and Use

To verify and use your on-demand service, do the following:

### <a id="status"></a> Step 1: Verify Your BOSH Deployment and On-Demand Service

1. Check the status of your service.
    <pre>
    cf service k1
    </pre>
    See the state change from `create in progress` to `create succeeded`.

1. Verify that the on-demand service is provisioned in the BOSH deployment
    <pre>
    bosh -e lite deployments
    </pre>

    See the following example output:

    <pre class="terminal">
    Name                                                    Release(s)                              Stemcell(s)                                        Cloud Config
    kafka-on-demand-broker                                  kafka-example-service-adapter/0+dev.2   bosh-warden-boshlite-ubuntu-trusty-go\_agent/<%= vars.odb_warden_stemcell_version %>   latest
                                                            on-demand-service-broker/0.2.0+dev.1
    service-instance_2715262c-8564-4cd9-b629-0ae99e6aa4b9   kafka-example-service/0+dev.2           bosh-warden-boshlite-ubuntu-trusty-go\_agent/<%= vars.odb_warden_stemcell_version %>   latest
    </pre>

    This example shows that the service instance is provisioned and the service releases are specified in the <%= vars.product_abbr %> deployment manifest.


### <a id="use"></a> Step 2: Use Your On-Demand Service

To use the service instance that you created, do the following:

1. Clone the Kafka example app.
    <pre>
    git clone https<span>:</span>//github.com/pivotal-cf-experimental/kafka-example-app.git
    </pre>

1. Push the app.
    <pre>
    cd kafka-example-app
    cf push --no-start
    </pre>

1. Bind the app to your service instance.
    <pre>
    cf bind-service kafka-example-app k1
    </pre>

1. Start the app.
    <pre>
    cf start kafka-example-app
    </pre>

### <a id="complete"></a> Step 3: Read and Write to Your Service Instance

Now the app runs at `https:/kafka-example-app.PCF-DEV-DOMAIN`.
You can use it to read and write to your on-demand Kafka service instance.

For example:

* To write data, run the following.

    ```
    curl -XPOST http://kafka-example-app.PCF-DEV-DOMAIN/queues/my-queue -d SOME-DATA
    ```

* To read data, run the following.

    ```
    curl http://kafka-example-app.PCF-DEV-DOMAIN/queues/my-queue
    ```
