---
title: Creating an On-Demand Service Tile
owner: London Services Enablement
---

This topic describes how to build an on-demand service tile using the Tile Generator.
For an example tile, see the [example-kafka-on-demand-tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/tree/e206e04a1eb80a5f53a5edd9a1f11e096bea5f4f)
in GitHub. For a list of available manifest properties for the broker, see the
[broker job spec](https://github.com/pivotal-cf/on-demand-service-broker-release/blob/master/jobs/broker/spec)
in GitHub.

## <a id="requirements"></a>Requirements

To build an on-demand tile you need the following releases:

- **On Demand Service Broker (<%= vars.product_abbr %>)**---Download <%= vars.product_abbr %> from
[<%= vars.oss_releases %>](https://bosh.io/releases/github.com/pivotal-cf/on-demand-service-broker-release).
- **Your service adapter**---Get this from the service author.
- **Your service release**---Get this from the release author.

## <a id="requirements"></a> About Networks

When using the <%= vars.product_abbr %> in a tile with <%= vars.ops_manager %> v2.0 and earlier, you need at least
two private networks:

- A network where <%= vars.ops_manager %> deploys the on-demand broker VM
- A different network where the on-demand broker deploys service instance VMs

The network for service instances should be flagged as a Service Network in <%= vars.ops_manager %>.
 <p class="note"><strong>Note: </strong>For <%= vars.ops_manager %> v2.1 and later, you do not need separate networks for the on-demand broker
and service instances.
However, VMware recommends that you have at least two networks as described above.</p>

## <a id="building"></a>Build a Tile for an On-Demand Service

There are several methods you can use to build a tile.
This topic describes how to build a tile using the Tile Generator.

To use the Tile Generator to build a tile for an on-demand service:

1. Generate a `tile.yml` file by doing steps 1–4 of [How to
Use](http://docs.pivotal.io/tiledev/tile-generator.html#how-to).

1. Add accessors, on-demand broker lifecycle errands, and optional features to the
`tile.yml` file generated in step 1.
This provides configuration for the <%= vars.product_abbr %> and additional configuration options for operators
to select in <%= vars.ops_manager %>.
<br><br>
For more information about what to add to the `tile.yml`, see the following sections below:
  - [Add Accessors](#accessors)
  - [Add On-Demand Broker Lifecycle Errands](#errands)
  - [(Optional) Allow Public IP Addresses for On-Demand Service Instance Groups](#public-ip)
  - [(Optional) Enable Floating Stemcells](#floating-stemcell)
  - [(Optional) Allow Secure Binding](#secure-creds)

1. Build your tile by running the following command:

    ```
    tile build
    ```

### <a id="accessors"></a>Add Accessors

The <%= vars.product_abbr %> requires tiles to be configured with certain information.
You must add accessors to the `tile.yml` file to provide values that operators
cannot configure in <%= vars.ops_manager %>.

Add the following accessors to your `tile.yml` file:

<p class="note"><strong>Note</strong>: The accessors in this section are mandatory. For other accessors, see
  <a href="https://docs.pivotal.io/tiledev/product-template-reference.html#ops-man-snippets">
    <%= vars.ops_manager %> Provided Snippets</a>.</p>

#### director

<%= vars.ops_manager %> uses these accessors to get values relating to the BOSH Director installation.
For the on-demand broker to interact with BOSH Director, on-demand service tiles
must be configured with credentials for managing BOSH deployments.

The following table lists the accessors you must add:

| Accessor                  | Description                                                                                                                    |
|:--------------------------|:-------------------------------------------------------------------------------------------------------------------------------|
| $director.hostname        | The director's hostname or IP address                                                                                                      |
| $director.ca\_public\_key | The director's root ca certificate. Related: [Configure SSL Certificates](operating.html#config-ca-certs). |
<br>
For example:

```yaml
bosh:
  url: https://(( $director.hostname )):25555
  root_ca_cert: (( $director.ca_public_key ))
```

To see this example in context, see the
[example-kafka-on-demand-tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/blob/e206e04a1eb80a5f53a5edd9a1f11e096bea5f4f/metadata_parts/handcraft.yml#L104-L106) in GitHub.

#### self

<%= vars.ops_manager %> uses these accessors to get values that have been assigned to the tile after installation.
To enable `$self` accessors, set `service_broker: true` at the top level of your
`tile.yml` file.

<p class="note"><strong>Note</strong>: Setting <code>service_broker: true</code>
  causes the BOSH Director to redeploy when installing or uninstalling the tile.</p>

The following table lists the accessors you must add:

| Accessor                  | Description                                                     |
|:--------------------------|:----------------------------------------------------------------|
| $self.uaa\_client_name    | UAA client name that can authenticate with the BOSH Director   |
| $self.uaa\_client\_secret | UAA client secret that can authenticate with the BOSH Director |
| $self.stemcell\_version   | The stemcell that the service deployment uses                   |
| $self.service\_network    | Service network configured for the on-demand instances          |

The service network has to be created manually.
Create a subnet on AWS and then add it to the director.
In the BOSH Director tile, under Create Networks &#62; ADD network &#62; fill in the subnet/vpc details.

For example:

```yaml
bosh:
  authentication:
    uaa:
      url: https://(( $director.hostname )):8443
      client_id: (( $self.uaa_client_name ))
      client_secret: (( $self.uaa_client_secret ))
```

To see this example in context, see the
[example-kafka-on-demand-tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/blob/e206e04a1eb80a5f53a5edd9a1f11e096bea5f4f/metadata_parts/handcraft.yml#L107-L111) in GitHub.

#### (Optional) cf

<%= vars.ops_manager %> uses these accessors to get values from the <%= vars.app_runtime_full %>
(<%= vars.app_runtime_abbr %>) tile.
If you want to use <%= vars.app_runtime_abbr %>, add these accessors to your `tile.yml` file.

The following table lists the accessors you must add to use <%= vars.app_runtime_abbr %>:

| Accessor                                        | Description                                                                        |
|:------------------------------------------------|:-----------------------------------------------------------------------------------|
| ..cf.ha\_proxy.skip\_cert\_verify.value         | Flag to skip SSL certificate verification for connections to the CF API            |
| ..cf.cloud\_controller.apps\_domain.value       | The application domain configured in the CF installation                           |
| ..cf.cloud\_controller.system\_domain.value     | The system domain configured in the CF installation                                |
| ..cf.uaa.system\_services\_credentials.identity | Username of a CF user in the cloud\_controller.admin group, to be used by services |
| ..cf.uaa.system\_services\_credentials.password | Password of a CF user in the cloud\_controller.admin group, to be used by services |
<br>
For example:

```yaml
disable_ssl_cert_verification: (( ..cf.ha_proxy.skip_cert_verify.value ))
cf:
  url: https://api.(( ..cf.cloud_controller.system_domain.value ))
  authentication:
    url: https://uaa.(( ..cf.cloud_controller.system_domain.value ))
    user_credentials:
      username: (( ..cf.uaa.system_services_credentials.identity ))
      password: (( ..cf.uaa.system_services_credentials.password ))
```

To see this example in context, see the
[example-kafka-on-demand-tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/blob/e206e04a1eb80a5f53a5edd9a1f11e096bea5f4f/metadata_parts/handcraft.yml#L103-L119) in GitHub.

### <a id="errands"></a>Add On-Demand Broker Lifecycle Errands

The [example-kafka-on-demand-tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/tree/e206e04a1eb80a5f53a5edd9a1f11e096bea5f4f)
example in GitHub shows how the errands in the on-demand broker release can be used.

VMware recommends that you add the errands below to your tile.
The errands should be specified in the following order:

Post-deploy:

- `register-broker`
- `upgrade-all-service-instances`

Pre-delete:

- `delete-all-service-instances-and-deregister-broker`

<p class="note"><strong>Note:</strong> The <code>upgrade-all-service-instances</code> errand can be
  configured with the number of simultaneous upgrades and the number of canary instances.
For more information about these parameters, see
<a href="upgrades.html#upgrade-all-instances">Upgrade All Service Instances</a>.</p>

For more information about these errands and how to add them, see [Broker and Service Management](./management.html).

The example [example-kafka-on-demand-tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/tree/e206e04a1eb80a5f53a5edd9a1f11e096bea5f4f) in GitHub
shows how to create a tab with fields to configure the parameters for this errand.
The example tile has constraints to ensure the number of simultaneous
upgrades is greater than one and the number of canaries is greater than zero.

### <a id="public-ip"></a>(Optional) Allow Public IP Addresses for On-Demand Service Instance Groups

<%= vars.ops_manager %> provides a VM extension called `public_ip` in the BOSH Director’s
cloud config.
Use this feature to give <%= vars.ops_manager %> operators the option to assign a public IP
address to instance groups.
This IP is only used for outgoing traffic to the internet from VMs with the
`public_ip` extension.
All internal traffic / incoming connections need to go over the private IP.

To allow operators to a assign public IP addresses to on-demand service instance groups,
update your `tile.yml` file as follows:

1. Add the following to the `form_types` section:
<br><br>
For example:

      ```
      form_types:
      - name: example_form
        property_inputs:
        - reference: .broker.example_vm_extensions
          label: VM options
          description: List of VM options for Service Instances
      ```
1.  Add the following to the `job_types` section:
<br><br>
For example:

      ```
      job_types:
      - name: broker
        templates:
        - name: broker
          release: on-demand-service-broker
          manifest: |
            service_catalog:
              plans:
              - name: example-plan
                instance_groups:
                - name: example-instance-group
                  vm_extensions: (( .broker.example_vm_extensions.value )) # add this line
      ```
1. Add the following to the `property_blueprints` section under the broker job:
<br><br>
For example:

      ```
        property_blueprints:           # add this section
        - name: example_vm_extensions
          type: multi_select_options
          configurable: true
          optional: true
          options:
          - name: "public_ip"
            label: "Internet Connected VMs (on supported IaaS providers)"
      ```

### <a id="floating-stemcell"></a>(Optional) Enable Floating Stemcells

<%= vars.ops_manager %> provides a feature called [Floating Stemcells](https://docs.pivotal.io/pivotalcf/customizing/understanding-stemcells.html)
that allows <%= vars.ops_manager %> to quickly propagate a patched stemcell to all VMs in the deployment
that have the same compatible stemcell.
Both the broker deployment and the service instances deployed by the On-Demand
Broker can make use of this feature.
Enabling this feature can help ensure that all of your service instances are patched
to the latest stemcell.

For the service instances to be installed with the latest stemcell automatically,
ensure that the `upgrade-all-service-instances` errand is selected.

To enable floating stemcells for your tile, update your `tile.yml` file as follows:

1. Implement floating stemcells.
<br><br>
For example:

    ```
    job_types:
      templates:
      - name: broker
        manifest: |
          service_deployment:
            releases:
            - name: release-name
              version: 1.0.0
              jobs: [job_server]
            stemcells:
              - os: ubuntu-trusty
                version: (( $self.stemcell_version )) # Add this line
    ```

1. Configure the `stemcell_criteria`.
<br><br>
For example:

    ```
    ---
    name: example-on-demand-service
    product_version: 1.0.0
    stemcell_criteria:
      os: ubuntu-trusty
      version: '3312'
      enable_patch_security_updates: true  # Add this line
    ```



### <a id="secure-creds"></a>(Optional) Allow Secure Binding

You can give <%= vars.ops_manager %> operators the option to enable secure binding.
If secure binding is enabled, binding credentials are stored securely in
runtime CredHub.
When users create bindings or service keys, <%= vars.product_abbr %> passes a secure reference to the
service credentials through the network instead of plain text.

<p class="note"><strong>Note:</strong>
  To use the secure binding credentials feature you must use <%= vars.ops_manager %> v2.0 or later.</p>

To include the option to enable secure binding, update your `tile.yml` file as follows:

1. Add `secure_binding_credentials` to the top-level properties block in the on-demand broker manifest. <br><br>
For example:

    ```yaml
    secure_binding_credentials:
      enabled: true
      authentication:
        uaa:
          client_id: CREDHUB_CLIENT_ID # client ID used by broker when communicating with CredHub
          client_secret: CREDHUB_CLIENT_SECRET # client secret used by broker when communicating with CredHub
          ca_cert: UAA_CA_CERT
    ```

1. To let users activate and deactivate this feature in the <%= vars.ops_manager %> UI, you need
to make some changes to your tile's metadata file:

  1. Add a form field to allow the user to activate or deactivate secure bindings.
  For an example form field, see the
  [example-kafka-on-demand-tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/blob/e206e04a1eb80a5f53a5edd9a1f11e096bea5f4f/metadata_parts/handcraft.yml#L39-L46) in GitHub.
  <br><br>
  1. Add an element in `property_blueprints` that reads the setting in the form
  field and exposes the appropriate manifest snippet for CredHub and secure binding.
  For an example `property_blueprints` section, see the
  [example-kafka-on-demand-tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/blob/e206e04a1eb80a5f53a5edd9a1f11e096bea5f4f/metadata_parts/handcraft.yml#L606-L632) in GitHub.
  <br><br>
  1. Change the broker job so that it consumes the CredHub BOSH link from the
  `property_blueprints` section.
  For an example broker job, see the
  [example-kafka-on-demand-tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/blob/e206e04a1eb80a5f53a5edd9a1f11e096bea5f4f/metadata_parts/handcraft.yml#L96) in GitHub.
  <br><br>
  1. Change the broker job so that it consumes the generated secure bindings
  manifest snippet.
  For an example broker job, see the
  [example-kafka-on-demand-tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/blob/e206e04a1eb80a5f53a5edd9a1f11e096bea5f4f/metadata_parts/handcraft.yml#L112) in GitHub.

### <a id="maintenance"></a>(Optional) Configure Maintenance Information
Maintenance information is used to uniquely describe the deployed version of
a service instance. It is used by the platform to determine when an upgrade is
available for that instance, allowing app developers to trigger the upgrade.

In the broker manifest, it is defined in the `service_catalog`, at global and plan levels,
as in the below example:

```yaml
# broker properties
service_catalog:
  maintenance_info: # applies to all plans
    public:
      stemcell: 1818
      docker: v2.4.6
    private:
      SECRET: PASSWORD
    version: 1.4.7-rc.1 # must be semver
    description: "OS image update.\nExpect downtime." # optional
  plans:
  - name: STABLE
    maintenance_info: # plan-specific
      public:
        size: 3
        docker: v3.0.0 # overwrites global configuration
      version: 7.0.0
  - name: EDGE
    maintenance_info: {}
```

When the Service Catalog is requested by the platform, the broker returns
the `maintenance_info` properties per plan, where:

  * Plan-specific configuration takes precedence over global configuration
  * `maintenance_info.public` is returned as configured
  * `maintenance_info.version` is returned as configured
  * `maintenance_info.description` is returned as configured
  * All properties in `maintenance_info.private` are aggregated and hashed into a single string

For the example manifest above, the catalog response is:

```json
{
    "services": [{
        "name": "MY-SERVICE",
        "plans": [{
            "name": "STABLE",
            "maintenance_info": {
                "public": {
                    "stemcell": "1818",
                    "docker": "v3.0.0",
                    "size": 3
                },
                "private": "HASHED-VALUE",
                "version": "7.0.0",
                "description": "OS image update.\nExpect downtime."
            }
        }, {
            "name": "EDGE",
            "maintenance_info": {
                "public": {
                    "stemcell": "1818",
                    "docker": "v2.4.6"
                },
                "private": "HASHED-VALUE",
                "version": "1.4.7-rc.1"
            }
        }]
    }]
}
```

VMware recommends using YAML anchors and references to avoid repeating maintenance information
values within the manifest. For instance, the stemcell version can be anchored with the
`&stemcellVersion` annotation and then referenced in the maintenance information with
the `*stemcellVersion` tag.

<p class="note"><strong>Note:</strong> The Open Service Broker API only supports
<code>maintenance_info.version</code> and <code>maintenance_info.description</code>.
VMware discourages the use of <code>public</code> and
<code>private</code> if Cloud Foundry is the platform communicating
to the broker.</p>
